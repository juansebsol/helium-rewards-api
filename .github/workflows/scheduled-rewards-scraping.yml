name: Scheduled Helium Rewards Scraping

on:
  # Run daily at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      devices:
        description: 'Comma-separated list of device keys to scrape (leave empty for all configured devices)'
        required: false
        type: string
        default: ''
      days:
        description: 'Number of days to look back (default: 30)'
        required: false
        type: number
        default: 30
      force_refresh:
        description: 'Force refresh existing data'
        required: false
        type: boolean
        default: false

jobs:
  scrape-rewards:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🚀 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci
      
    - name: 🎯 Set up environment
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
        echo "AWS_BUCKET=${{ secrets.AWS_BUCKET }}" >> $GITHUB_ENV
        echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> $GITHUB_ENV
        echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> $GITHUB_ENV
        echo "DAYS_TO_AGGREGATE=${{ github.event.inputs.days || '30' }}" >> $GITHUB_ENV
        
    - name: 🔍 Determine devices to scrape
      id: devices
      run: |
        if [ -n "${{ github.event.inputs.devices }}" ]; then
          # Use manually specified devices
          echo "devices=${{ github.event.inputs.devices }}" >> $GITHUB_OUTPUT
          echo "mode=manual"
        else
          # Use all configured devices
          echo "devices=all" >> $GITHUB_OUTPUT
          echo "mode=scheduled"
        fi
        echo "mode=${{ github.event.inputs.devices != '' && 'manual' || 'scheduled' }}" >> $GITHUB_OUTPUT
        
    - name: 📋 Show device list
      run: |
        echo "📱 Devices to scrape: ${{ steps.devices.outputs.devices }}"
        echo "🔄 Mode: ${{ steps.devices.outputs.mode }}"
        echo "📅 Days to aggregate: ${{ github.event.inputs.days || '30' }}"
        echo ""
        if [ "${{ steps.devices.outputs.devices }}" = "all" ]; then
          echo "📋 Current configured devices:"
          npm run device:list
        else
          echo "🎯 Manual devices: ${{ steps.devices.outputs.devices }}"
        fi
        
    - name: 🚀 Run scheduled rewards scraping
      run: |
        if [ "${{ steps.devices.outputs.devices }}" = "all" ]; then
          echo "🔄 Running scheduled scraping for all configured devices..."
          npm run scrape:scheduled all
        else
          echo "🎯 Running manual scraping for specified devices..."
          # Split comma-separated devices and scrape each one
          IFS=',' read -ra DEVICES <<< "${{ steps.devices.outputs.devices }}"
          for device in "${DEVICES[@]}"; do
            device=$(echo "$device" | xargs)  # trim whitespace
            if [ -n "$device" ]; then
              echo "📱 Scraping device: $device"
              npm run scrape:rewards "$device"
              echo "⏳ Waiting 15 seconds before next device..."
              sleep 15
            fi
          done
        fi
        
    - name: 📋 Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: scheduled-rewards-scraping-${{ github.run_id }}
        path: |
          downloads/
          logs/
        retention-days: 7
        
    - name: 📊 Summary
      run: |
        echo "🎉 Scheduled Helium rewards scraping completed!"
        echo "🔄 Mode: ${{ steps.devices.outputs.mode }}"
        echo "🎯 Devices: ${{ steps.devices.outputs.devices }}"
        echo "📅 Days aggregated: ${{ github.event.inputs.days || '30' }}"
        echo "📁 Artifacts uploaded"
        echo "⏰ Completed at: $(date)"
        
  # Optional: Add a job to notify external systems
  notify-completion:
    needs: scrape-rewards
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📢 Notify completion
      run: |
        if [ "${{ needs.scrape-rewards.result }}" = "success" ]; then
          echo "✅ Scheduled rewards scraping completed successfully"
          # Add webhook notifications here if needed
          # Example: curl -X POST $WEBHOOK_URL -H "Content-Type: application/json" -d '{"status":"success","job":"scheduled-rewards-scraping","timestamp":"'$(date -Iseconds)'"}'
        else
          echo "❌ Scheduled rewards scraping failed"
          # Add failure notifications here if needed
          # Example: curl -X POST $WEBHOOK_URL -H "Content-Type: application/json" -d '{"status":"failed","job":"scheduled-rewards-scraping","timestamp":"'$(date -Iseconds)'"}'
        fi
